{"version":3,"file":"static/js/768.e76375e6.chunk.js","mappings":"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","sources":["routes/Detail.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addItem } from \"../store\";\r\n\r\n//Context1 가져오는 부분\r\n// import { Context1 } from \"./../App\";\r\n\r\n//예전에 컴포넌트 만들던방법\r\nclass Detail2 extends React.Component{\r\n    componentDidMount(){ //컴포넌트 mount시 여기 코드 실행됨\r\n\r\n    }\r\n    componentDidUpdate(){//컴포넌트 update시 실행\r\n\r\n    }\r\n    componentWillUnmount(){//컴포넌트 unMount 즉 종료될때\r\n\r\n    }\r\n}\r\n\r\n\r\nlet Btn = styled.button`\r\n    background : ${props=>props.bg};\r\n    color: ${props=>props.bg=='white'?'black':'white'};\r\n    padding : 10px;\r\n    margin-top : 5px;\r\n    border : 1px solid #dc3545;\r\n    border-radius : 0.375rem;\r\n    padding: 8px 18px;  \r\n    font-size: 14px;\r\n    font-weight : 500;\r\n    font-family : 'NanumGothicCoding';\r\n`\r\nlet NewBtn = styled.button(Btn);\r\n\r\nlet Box = styled.div`\r\n    background : grey;\r\n    padding : 20px;\r\n`\r\n\r\nfunction Detail(props){\r\n\r\n    //hook 다는법\r\n    //Detail 컴포넌트가 mount(실행) 되거나 update시 여기 부분 코드 실행\r\n    // useEffect는 renderint(html 로드가 끝나고)이 다되고 실행됨\r\n    //      그래서 장점은 연산이 오래걸릴떄 로딩이 오래걸리는 그런문제 해결\r\n    //      그래서 타이머, 어려운 연산, 서버에서 데이터 가져오는 작업등을 여기서 수행 \r\n\r\n\r\n\r\n    //이런 context는 별로 좋지 않음\r\n    // let {shoesStock, shoes} = useContext(Context1);\r\n    // console.log(shoesStock)\r\n\r\n\r\n    \r\n    let [alert, setAlert] = useState(true); //위에 2초경고창\r\n    let [count, setCount] = useState(1);    //입력수량\r\n    let [countAlert, setCountAlert] = useState(false);  //입력수량 올바른지 (숫자인지)\r\n\r\n    let [tab,setTab]= useState(0);\r\n\r\n    let [orderComplete, setOrderComplete] = useState(false);\r\n\r\n\r\n    let [fade2, setFade2] = useState('')\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        setFade2('end')\r\n        return ()=>{\r\n        setFade2('')\r\n        }\r\n    },[])\r\n    \r\n    useEffect(()=>{\r\n        // 2번 실행되는것처럼 보이는건 테스트상에서만 그런것\r\n        // 없애는법은 <React.StrictMode> 를 index.js에서 제거하거나해야함\r\n\r\n\r\n        let timeDealTimer = setTimeout(()=>{setAlert(false)},2000)\r\n        \r\n        //이안에서 return() => {코드~~0} 작성시 useEffect 동작전에 실행됨\r\n        // 만약 위 연산 전에 미리 코드 실행 원할때 작성 가능\r\n        return()=>{\r\n            //쓰레기들이 생기면 자주 랜더링될때 데이터낭비가 일어나는데\r\n            //그걸 해결하기 위해 기존 타이머 등 제거할때 사용\r\n            setAlert(true);\r\n            clearTimeout(timeDealTimer);\r\n        }\r\n        \r\n    },[])//뒤에 들어간 대상이 변할때만 실행되게 할수있음. \r\n    //만약 count빼고 빈칸으로 해놓으면 mount될때 1회만 실행되게 가능\r\n    useEffect(()=>{\r\n        isNaN(count)?setCountAlert(true):setCountAlert(false);\r\n        \r\n        console.log(\"count : \"+count)\r\n    },[count])\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        let alertTimer = setTimeout(()=>{setOrderComplete(false)},3000)\r\n        \r\n        //이안에서 return() => {코드~~0} 작성시 useEffect 동작전에 실행됨\r\n        // 만약 위 연산 전에 미리 코드 실행 원할때 작성 가능\r\n        return()=>{\r\n            clearTimeout(alertTimer);\r\n        }\r\n        \r\n    },[orderComplete])//뒤에 들어간 대상이 변할때만 실행되게 할수있음. \r\n\r\n\r\n\r\n    let {id}= useParams();\r\n    let target = props.shoes.find(function(x){\r\n        return x.id == id\r\n    });\r\n\r\n    useEffect(()=>{\r\n        let watchedData = JSON.parse(localStorage.getItem('watched'))\r\n        if(watchedData){\r\n            watchedData=watchedData.filter(id=>id!=target.id)\r\n        }\r\n        watchedData.push(target.id);\r\n        if(watchedData.length>5){\r\n            watchedData= watchedData.slice(-5)\r\n        }\r\n        localStorage.setItem('watched',JSON.stringify([...new Set(watchedData)]));\r\n\r\n\r\n        // localStorage.setItem('watched',JSON.stringify([...new Set(watchedData)]));\r\n        console.log('1 : '+watchedData)\r\n        \r\n    },[])\r\n    return(\r\n        <>\r\n        <div className={`container start ${fade2}`}>\r\n            {/* {\r\n                alert==true?\r\n                <TimeDeal/>:\r\n                null\r\n            } */}\r\n            \r\n\r\n        \r\n\r\n            {/* <Btn bg = '#dc3545' onClick={()=>{}}>버튼</Btn> */}\r\n            <div className=\"row\">\r\n            {\r\n                orderComplete==true?\r\n                <Alert alertText='주문 완료'></Alert>:\r\n                null\r\n            }\r\n        \r\n            <div className=\"col-md-6\">\r\n                <img src={'https://codingapple1.github.io/shop/shoes'+(Number(id)+1)+'.jpg'} width=\"100%\" />\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                <h4 className=\"pt-5\">{target.title}</h4>\r\n                <p>{target.content}</p>\r\n                <p>{target.price}</p>\r\n                {/* {\r\n                    countAlert==true?<Alert alertText=\"숫자만 입력하세요\"></Alert>:<Alert hidden={true}/>\r\n                } */}\r\n                <div className=\"d-flex align-items-center\" style={{justifyContent : 'center',marginBottom : '30px'}}>\r\n                    <Button variant=\"outline-primary\" style={{width : '55px'}} onClick={()=>{\r\n                        if(count>1){\r\n                            setCount(count-1)\r\n                        }\r\n                        }}><span style={{userSelect : 'none', cursor : 'pointer',fontSize : '20px',fontWeight : '800'}}>-</span></Button>\r\n                    <Form.Control  \r\n                        value={count} \r\n                        style={{maxWidth : '100px',textAlign : 'center'}}\r\n                        onChange={(e)=>{\r\n                            let newCount = parseInt(e.target.value, 10); // 숫자로 변환\r\n                            if (!isNaN(newCount)) {\r\n                                setCount(newCount); // 유효한 숫자일 때만 상태 업데이트\r\n                            }\r\n                        }}  \r\n                        />\r\n                    <Button variant=\"outline-primary\" style={{width : '55px'}} onClick={()=>{setCount(count+1)}}><span style={{userSelect : 'none', cursor : 'pointer', fontSize : '20px',fontWeight : '800'}}>+</span></Button>\r\n                </div>\r\n                \r\n             \r\n                <button className=\"btn btn-danger\" onClick={()=>{\r\n                    setOrderComplete(true)\r\n                    dispatch(addItem( {id : target.id, name : target.title, count : count} ))\r\n                }}>주문하기</button>\r\n                \r\n            </div>\r\n            <DetailTab tab={tab} setTab={setTab}></DetailTab>\r\n            </div>\r\n        </div> \r\n        </>\r\n    )\r\n}\r\n\r\nfunction TimeDeal(props){\r\n    return(\r\n        <div className=\"alert alert-warning\">\r\n                2초 이내 구매시 할인\r\n            </div>\r\n    )\r\n}\r\n\r\nfunction Alert(props){\r\n    return(\r\n        <div className=\"alert alert-warning\" style={{ alignItems: 'center', justifyContent: 'center', width : '100%',display : 'flex',zIndex: '999', visibility: props.hidden ? 'hidden' : 'visible' }}>\r\n                {props.alertText||\"경고\"}\r\n            </div>\r\n    )\r\n}\r\n\r\nfunction TabContent({tab}){ //이런식으로 props 안쓸경우 {}로 표현 가능 ->이름 보낸거랑 똑같이\r\n    // if(tab==0){\r\n    //     return <div className=\"start end\">내용0</div>\r\n    // }\r\n    // else if(tab==1){\r\n    //     return <div className=\"start end\">내용1</div>\r\n    // }\r\n    // else if(tab==2){\r\n    //     return <div className=\"start end\">내용2</div>\r\n    // }\r\n\r\n    let [fade,setFade] = useState('');\r\n    useEffect(()=>{\r\n        let timer = setTimeout(()=>{setFade('end')},100)\r\n        return()=>{\r\n            setFade('')\r\n            clearTimeout(timer)\r\n        }\r\n        \r\n\r\n    },[tab])\r\n\r\n    return (<div className={`start ${fade}`}>\r\n        {[<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][tab]}\r\n    </div>)\r\n}\r\n\r\nfunction DetailTab(props){\r\n    \r\n    return(\r\n        <>\r\n            <Nav fill variant=\"tabs\"  defaultActiveKey=\"link0\" style={{marginTop : '50px'}}>\r\n                <Nav.Item >\r\n                <Nav.Link eventKey=\"link0\" onClick={()=>{props.setTab(0)}}>버튼0</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                <Nav.Link eventKey=\"link1\" onClick={()=>{props.setTab(1)}}>버튼1</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                <Nav.Link eventKey=\"link2\" onClick={()=>{props.setTab(2)}}>버튼2</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n            <TabContent tab={props.tab}/>\r\n            \r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default Detail;"],"names":["Btn","React","styled","button","_templateObject","_taggedTemplateLiteral","props","bg","div","_templateObject2","Alert","_jsx","className","style","alignItems","justifyContent","width","display","zIndex","visibility","hidden","children","alertText","TabContent","_ref","tab","_useState13","useState","_useState14","_slicedToArray","fade","setFade","useEffect","timer","setTimeout","clearTimeout","concat","DetailTab","_jsxs","_Fragment","Nav","fill","variant","defaultActiveKey","marginTop","Item","Link","eventKey","onClick","setTab","_useState","_useState2","setAlert","_useState3","_useState4","count","setCount","_useState5","_useState6","setCountAlert","_useState7","_useState8","_useState9","_useState10","orderComplete","setOrderComplete","_useState11","_useState12","fade2","setFade2","dispatch","useDispatch","timeDealTimer","isNaN","console","log","alertTimer","id","useParams","target","shoes","find","x","watchedData","JSON","parse","localStorage","getItem","filter","push","length","slice","setItem","stringify","_toConsumableArray","Set","src","Number","title","content","price","marginBottom","Button","userSelect","cursor","fontSize","fontWeight","Form","Control","value","maxWidth","textAlign","onChange","e","newCount","parseInt","addItem","name"],"sourceRoot":""}